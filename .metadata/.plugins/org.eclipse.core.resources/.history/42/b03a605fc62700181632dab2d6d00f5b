/****************************************************************************
 *
 * Copyright 2016 Samsung Electronics All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 ****************************************************************************/
/****************************************************************************
 * examples/hello/hello_main.c
 *
 *   Copyright (C) 2008, 2011-2012 Gregory Nutt. All rights reserved.
 *   Author: Gregory Nutt <gnutt@nuttx.org>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name NuttX nor the names of its contributors may be
 *    used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
 * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 ****************************************************************************/

/****************************************************************************
 * Included Files
 ****************************************************************************/

#include <errno.h>
#include <fcntl.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iotbus/iotbus_gpio.h>
#include <iotbus/iotbus_error.h>
#include <sys/mount.h>
#include <tinyara/arch.h>
#include <tinyara/config.h>
#include <tinyara/gpio.h>

/****************************************************************************
 * hello_main
 ****************************************************************************/

iotbus_gpio_context_h g_gpio;
iotbus_gpio_context_h g_gpio2;

volatile int ledstate = 0;

#include <fcntl.h>
#include <tinyara/gpio.h>

int gpio_read(int port)
{
	char buf[4];
	char devpath[16];
	snprintf(devpath, 16, "/dev/gpio%d", port);
	int fd = open(devpath, O_RDWR);

	ioctl(fd, GPIOIOC_SET_DIRECTION, GPIO_DIRECTION_IN);
	if (read(fd, buf, sizeof(buf)) < 0) {
		printf("read error\n");
		return -1;
	}
	close(fd);

	return buf[0] == '1';
}


void gpio_write(int port, int value)
{
	char buf[4];
	char devpath[16];
	snprintf(devpath, 16, "/dev/gpio%d", port);
	int fd = open(devpath, O_RDWR);

	ioctl(fd, GPIOIOC_SET_DIRECTION, GPIO_DIRECTION_OUT);
	if (write(fd, buf, snprintf(buf, sizeof(buf), "%d", !!value)) < 0) {
		printf("write error\n");
		return;
	}
	close(fd);
}


void gpio_event_callback(void *user_data)
{
	iotbus_gpio_context_h hnd = (iotbus_gpio_context_h) user_data;
	int value = iotbus_gpio_read(hnd);
	printf("inside callback, value %d\r\n",value);
	if(ledstate==1){
		iotbus_gpio_write(51,1);
		printf("I'm a 1!!!");
		//gpio_write(51, 1);
		ledstate =0;
	} else {
		iotbus_gpio_write(51,0);
		printf("I'm a 0!!!");
	//	gpio_write(51, 0);
		ledstate = 1;
	}
	return;
}

void gpio_setup(void)
{
	int ret=0;
	g_gpio = iotbus_gpio_open(51); //LED
	g_gpio2 = iotbus_gpio_open(57); //Button

	ret = iotbus_gpio_set_direction(g_gpio, IOTBUS_GPIO_DIRECTION_OUT);
	ret = iotbus_gpio_set_direction(g_gpio2, IOTBUS_GPIO_DIRECTION_IN);
	if(ret != 0){
		printf("set direction fail\n");
	}
	//iotbus_gpio_write(g_gpio,1);

	//Register callback
	ret=iotbus_gpio_register_cb(g_gpio2,IOTBUS_GPIO_EDGE_BOTH,gpio_event_callback,(void *)g_gpio2);
	if(ret != 0){
		printf("callback register failed\n");
	}
	iotbus_gpio_write(g_gpio,1);
}

int main(int argc, char *argv[])
{
	iotapi_initialize(); //basically the interrupt system
	gpio_setup();
	ledstate = 0;
	printf(" \n\n\n\n starting testing for gpio \n\n\n\n ");
	while(1){

	}

	return 0;
}
